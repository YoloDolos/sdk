{
  "address": "0x742C77Bc991BD99CE846EADcf84b7E504aacc341",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "animals",
      "outputs": [
        {
          "internalType": "enum IZoo.Type",
          "name": "kind",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "probability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yield",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boost",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZoo.Rarity",
          "name": "rarity",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "contentHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IMedia.MediaData",
          "name": "data",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "prevOwner",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "owner",
              "type": "tuple"
            }
          ],
          "internalType": "struct IMarket.BidShares",
          "name": "bidShares",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseEgg",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseEgg",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_hybridEgg",
          "type": "string"
        }
      ],
      "name": "configureEggs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "zooKeeper",
          "type": "address"
        }
      ],
      "name": "configureKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eggPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eggSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "eggs",
      "outputs": [
        {
          "internalType": "enum IZoo.Type",
          "name": "kind",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "birthday",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minted",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "contentHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IMedia.MediaData",
          "name": "data",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "prevOwner",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "owner",
              "type": "tuple"
            }
          ],
          "internalType": "struct IMarket.BidShares",
          "name": "bidShares",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "random",
          "type": "uint256"
        }
      ],
      "name": "getRandomAnimal",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "probability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "yield",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Rarity",
              "name": "rarity",
              "type": "tuple"
            },
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "animalA",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "animalB",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenA",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenB",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Parents",
              "name": "parents",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "count",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Breed",
              "name": "breed",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "eggID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dropID",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Meta",
              "name": "meta",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct IZoo.Token",
          "name": "token",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "random",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "animalA",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animalB",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "tokenA",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenB",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZoo.Parents",
          "name": "parents",
          "type": "tuple"
        }
      ],
      "name": "getRandomHybrid",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "probability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "yield",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Rarity",
              "name": "rarity",
              "type": "tuple"
            },
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "animalA",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "animalB",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenA",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenB",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Parents",
              "name": "parents",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "count",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Breed",
              "name": "breed",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "eggID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dropID",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Meta",
              "name": "meta",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct IZoo.Token",
          "name": "token",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hybridEgg",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "hybridParents",
      "outputs": [
        {
          "internalType": "enum IZoo.Type",
          "name": "kind",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "probability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yield",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boost",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZoo.Rarity",
          "name": "rarity",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "parentA",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "parentB",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "contentHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IMedia.MediaData",
          "name": "data",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "prevOwner",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "owner",
              "type": "tuple"
            }
          ],
          "internalType": "struct IMarket.BidShares",
          "name": "bidShares",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hybridSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "hybrids",
      "outputs": [
        {
          "internalType": "enum IZoo.Type",
          "name": "kind",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "probability",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "yield",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "boost",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZoo.Rarity",
          "name": "rarity",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "parentA",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "parentB",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "tokenURI",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "metadataURI",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "contentHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "metadataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IMedia.MediaData",
          "name": "data",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "prevOwner",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "creator",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Decimal.D256",
              "name": "owner",
              "type": "tuple"
            }
          ],
          "internalType": "struct IMarket.BidShares",
          "name": "bidShares",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeperAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newEgg",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "probability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "yield",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Rarity",
              "name": "rarity",
              "type": "tuple"
            },
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "animalA",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "animalB",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenA",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenB",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Parents",
              "name": "parents",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "count",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Breed",
              "name": "breed",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "eggID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dropID",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Meta",
              "name": "meta",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct IZoo.Token",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "animalA",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animalB",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "tokenA",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenB",
              "type": "uint256"
            }
          ],
          "internalType": "struct IZoo.Parents",
          "name": "parents",
          "type": "tuple"
        }
      ],
      "name": "newHybridEgg",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "probability",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "yield",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "boost",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Rarity",
              "name": "rarity",
              "type": "tuple"
            },
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "customName",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "animalA",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "animalB",
                  "type": "string"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenA",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tokenB",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Parents",
              "name": "parents",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "count",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Breed",
              "name": "breed",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "eggID",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "dropID",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IZoo.Meta",
              "name": "meta",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct IZoo.Token",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "rarities",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "probability",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "boost",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rarityAnimals",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "raritySorted",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "rarity",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "setAnimal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "setEgg",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum IZoo.Type",
              "name": "kind",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "supply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "birthday",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minted",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "tokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "metadataURI",
                  "type": "string"
                },
                {
                  "internalType": "bytes32",
                  "name": "contentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "metadataHash",
                  "type": "bytes32"
                }
              ],
              "internalType": "struct IMedia.MediaData",
              "name": "data",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "prevOwner",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "creator",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Decimal.D256",
                  "name": "owner",
                  "type": "tuple"
                }
              ],
              "internalType": "struct IMarket.BidShares",
              "name": "bidShares",
              "type": "tuple"
            }
          ],
          "internalType": "struct ZooDrop.Egg",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "rarity",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "parentA",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "parentB",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metadataURI",
          "type": "string"
        }
      ],
      "name": "setHybrid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "probability",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "boost",
          "type": "uint256"
        }
      ],
      "name": "setRarity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "title",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x49e5ed74da989f3259295470133aa3e68538fc21364e68d68e7cdf146fe4bf34",
  "receipt": {
    "to": null,
    "from": "0xd0AEF8b960d43418DC0A83DD0cAc04A3793De3E0",
    "contractAddress": "0x742C77Bc991BD99CE846EADcf84b7E504aacc341",
    "transactionIndex": 0,
    "gasUsed": "3925912",
    "logsBloom": "0x
    "blockHash": "0x58ba95ad051a8e3aa804c86b6001a0e5b1a7bcea2de3d49de13ca11a25818775",
    "transactionHash": "0x49e5ed74da989f3259295470133aa3e68538fc21364e68d68e7cdf146fe4bf34",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x49e5ed74da989f3259295470133aa3e68538fc21364e68d68e7cdf146fe4bf34",
        "address": "0x742C77Bc991BD99CE846EADcf84b7E504aacc341",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d0aef8b960d43418dc0a83dd0cac04a3793de3e0"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x58ba95ad051a8e3aa804c86b6001a0e5b1a7bcea2de3d49de13ca11a25818775"
      }
    ],
    "blockNumber": 9,
    "cumulativeGasUsed": "3925912",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Gen 0"
  ],
  "solcInputHash": "f8aaf6001fa3bb8ae68d40867e1e4717",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"animals\",\"outputs\":[{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseEgg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseEgg\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_hybridEgg\",\"type\":\"string\"}],\"name\":\"configureEggs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"zooKeeper\",\"type\":\"address\"}],\"name\":\"configureKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eggPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eggSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"eggs\",\"outputs\":[{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"random\",\"type\":\"uint256\"}],\"name\":\"getRandomAnimal\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct IZoo.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"random\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"}],\"name\":\"getRandomHybrid\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct IZoo.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hybridEgg\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hybridParents\",\"outputs\":[{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"parentA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"parentB\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hybridSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"hybrids\",\"outputs\":[{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"parentA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"parentB\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newEgg\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct IZoo.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"}],\"name\":\"newHybridEgg\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Rarity\",\"name\":\"rarity\",\"type\":\"tuple\"},{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"customName\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"animalA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animalB\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenB\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Parents\",\"name\":\"parents\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Breed\",\"name\":\"breed\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"eggID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dropID\",\"type\":\"uint256\"}],\"internalType\":\"struct IZoo.Meta\",\"name\":\"meta\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct IZoo.Token\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"rarities\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rarityAnimals\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"raritySorted\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"setAnimal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"setEgg\",\"outputs\":[{\"components\":[{\"internalType\":\"enum IZoo.Type\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"birthday\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"metadataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct IMedia.MediaData\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"prevOwner\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"creator\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct Decimal.D256\",\"name\":\"owner\",\"type\":\"tuple\"}],\"internalType\":\"struct IMarket.BidShares\",\"name\":\"bidShares\",\"type\":\"tuple\"}],\"internalType\":\"struct ZooDrop.Egg\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rarity\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"parentA\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"parentB\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadataURI\",\"type\":\"string\"}],\"name\":\"setHybrid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"probability\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"boost\",\"type\":\"uint256\"}],\"name\":\"setRarity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"title\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/ZooDrop.sol\":\"ZooDrop\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"src/Decimal.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\n// Copyright 2019 dYdX Trading Inc.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n// http://www.apache.org/licenses/LICENSE-2.0\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * NOTE: This file is a clone of the dydx protocol's Decimal.sol contract. It was forked from https://github.com/dydxprotocol/solo\\n * at commit 2d8454e02702fe5bc455b848556660629c3cad36\\n *\\n * It has not been modified other than to use a newer solidity in the pragma to match the rest of the contract suite of this project\\n */\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { Math } from \\\"./Math.sol\\\";\\n\\n/**\\n * @title Decimal\\n *\\n * Library that defines a fixed-point number with 18 decimal places.\\n */\\nlibrary Decimal {\\n    using SafeMath for uint256;\\n\\n    // ============ Constants ============\\n\\n    uint256 constant BASE_POW = 18;\\n    uint256 constant BASE = 10**BASE_POW;\\n\\n    // ============ Structs ============\\n\\n    struct D256 {\\n        uint256 value;\\n    }\\n\\n    // ============ Functions ============\\n\\n    function one() internal pure returns (D256 memory) {\\n        return D256({value: BASE});\\n    }\\n\\n    function onePlus(D256 memory d) internal pure returns (D256 memory) {\\n        return D256({value: d.value.add(BASE)});\\n    }\\n\\n    function mul(uint256 target, D256 memory d)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(target, d.value, BASE);\\n    }\\n\\n    function div(uint256 target, D256 memory d)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.getPartial(target, BASE, d.value);\\n    }\\n}\\n\",\"keccak256\":\"0x1badf132165448ca3c23e4446f5fb4f26cd6a68e82b777734cf429d42c48f9c6\",\"license\":\"Apache-2.0\"},\"src/Math.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { SafeMath } from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/// @title Math\\n/// Library for non-standard Math functions\\n/// NOTE: This file is a clone of the dydx protocol's Decimal.sol contract.\\n/// It was forked from https://github.com/dydxprotocol/solo at commit\\n/// 2d8454e02702fe5bc455b848556660629c3cad36. It has not been modified other than to use a\\n/// newer solidity in the pragma to match the rest of the contract suite of this project.\\nlibrary Math {\\n    using SafeMath for uint256;\\n\\n    // ============ Library Functions ============\\n\\n    /*\\n     * Return target * (numerator / denominator).\\n     */\\n    function getPartial(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) internal pure returns (uint256) {\\n        return target.mul(numerator).div(denominator);\\n    }\\n\\n    /*\\n     * Return target * (numerator / denominator), but rounded up.\\n     */\\n    function getPartialRoundUp(\\n        uint256 target,\\n        uint256 numerator,\\n        uint256 denominator\\n    ) internal pure returns (uint256) {\\n        if (target == 0 || numerator == 0) {\\n            // SafeMath will check for zero denominator\\n            return SafeMath.div(0, denominator);\\n        }\\n        return target.mul(numerator).sub(1).div(denominator).add(1);\\n    }\\n\\n    function to128(uint256 number) internal pure returns (uint128) {\\n        uint128 result = uint128(number);\\n        require(result == number, \\\"Math: Unsafe cast to uint128\\\");\\n        return result;\\n    }\\n\\n    function to96(uint256 number) internal pure returns (uint96) {\\n        uint96 result = uint96(number);\\n        require(result == number, \\\"Math: Unsafe cast to uint96\\\");\\n        return result;\\n    }\\n\\n    function to32(uint256 number) internal pure returns (uint32) {\\n        uint32 result = uint32(number);\\n        require(result == number, \\\"Math: Unsafe cast to uint32\\\");\\n        return result;\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0xb58d87d1ec96fd6dac4340545a8c3750c43b44036420786c36d5c9074786f4bf\",\"license\":\"Apache-2.0\"},\"src/ZooDrop.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Decimal } from \\\"./Decimal.sol\\\";\\nimport { IMarket } from \\\"./interfaces/IMarket.sol\\\";\\nimport { IMedia } from \\\"./interfaces/IMedia.sol\\\";\\nimport { IZoo } from \\\"./interfaces/IZoo.sol\\\";\\n\\nimport \\\"./console.sol\\\";\\n\\n\\ncontract ZooDrop is Ownable {\\n\\n    struct Egg {\\n        IZoo.Type kind;\\n        string  name;\\n        uint256 supply;\\n        uint256 price;\\n        uint256 timestamp;    // time created\\n        uint256 birthday;     // birth block\\n        uint256 minted;       // amount minted\\n        IMedia.MediaData data;\\n        IMarket.BidShares bidShares;\\n    }\\n\\n    struct Animal {\\n        IZoo.Type kind;\\n        IZoo.Rarity rarity;\\n        string name;\\n        IMedia.MediaData data;\\n        IMarket.BidShares bidShares;\\n    }\\n\\n    struct Hybrid {\\n        IZoo.Type kind;\\n        IZoo.Rarity rarity;\\n        string name;\\n        uint256 yield;\\n        string parentA;\\n        string parentB;\\n        IMedia.MediaData data;\\n        IMarket.BidShares bidShares;\\n    }\\n\\n    // Title of drop\\n    string public title;\\n\\n    // Name of default base egg\\n    string public baseEgg;\\n\\n    // Name of configured hybrid egg\\n    string public hybridEgg;\\n\\n    // Address of ZooKeeper contract\\n    address public keeperAddress;\\n\\n    // mapping of Rarity name to Rarity\\n    mapping (string => IZoo.Rarity) public rarities;\\n\\n    // mapping of Rarity name to []string of Animal names\\n    mapping (string => string[]) public rarityAnimals;\\n\\n    // Rarity sorted by most rare -> least rare\\n    string[] public raritySorted;\\n\\n    // mapping of Egg name to Egg\\n    mapping (string => Egg) public eggs;\\n\\n    // mapping of Animal name to Animal\\n    mapping (string => Animal) public animals;\\n\\n    // mapping of animal name to Hybrid\\n    mapping (string => Hybrid) public hybrids;\\n\\n    // mapping of (parent + parent) to Hybrid\\n    mapping (string => Hybrid) public hybridParents;\\n\\n    // Ensure only ZK can call method\\n    modifier onlyZoo() {\\n        require(\\n            keeperAddress == msg.sender, \\\"ZooDrop: Only ZooKeeper can call this method\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(string memory _title) {\\n        title = _title;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return getEgg(baseEgg).minted;\\n    }\\n\\n    // Set current base and hybrid egg\\n    function configureEggs(string memory _baseEgg, string memory _hybridEgg) public onlyOwner {\\n        baseEgg = _baseEgg;\\n        hybridEgg = _hybridEgg;\\n    }\\n\\n    // Configure current ZooKeeper\\n    function configureKeeper(address zooKeeper) public onlyOwner {\\n        keeperAddress = zooKeeper;\\n    }\\n\\n    // Add or configure a given rarity\\n    function setRarity(string memory name, uint256 probability, uint256 yield, uint256 boost) public onlyOwner returns (bool) {\\n        require(probability > 0, \\\"Rarity must be over zero\\\");\\n\\n        IZoo.Rarity memory rarity = IZoo.Rarity({\\n            name: name,\\n            probability: probability,\\n            yield: yield,\\n            boost: boost\\n        });\\n\\n        // Save rarity\\n        rarities[rarity.name] = rarity;\\n        raritySorted.push(rarity.name);\\n\\n        return true;\\n    }\\n\\n    // Add or configure a given kind of egg\\n    function setEgg(string memory name, uint256 price, uint256 supply, string memory tokenURI, string memory metadataURI) public onlyOwner returns (Egg memory) {\\n        Egg memory egg;\\n        egg.name = name;\\n        egg.data = getMediaData(tokenURI, metadataURI);\\n        egg.bidShares = getBidShares();\\n        egg.price = price;\\n        egg.supply = supply;\\n        eggs[name] = egg;\\n        return egg;\\n    }\\n\\n    // Add or configure a given animal\\n    function setAnimal(string memory name, string memory rarity, string memory tokenURI, string memory metadataURI) public onlyOwner returns (bool) {\\n        Animal memory animal = Animal({\\n            kind: IZoo.Type.BASE_ANIMAL,\\n            rarity: getRarity(rarity),\\n            name: name,\\n            data: getMediaData(tokenURI, metadataURI),\\n            bidShares: getBidShares()\\n        });\\n\\n        // Save animal by name\\n        animals[name] = animal;\\n\\n        // Try to add animal to rarity\\n        addAnimalToRarity(animal.rarity.name, animal.name);\\n\\n        return true;\\n    }\\n\\n    // Add or configure a given hybrid\\n    function setHybrid(string memory name, string memory rarity, uint256 yield, string memory parentA, string memory parentB, string memory tokenURI, string memory metadataURI) public onlyOwner returns (bool) {\\n        Hybrid memory hybrid = Hybrid({\\n            kind: IZoo.Type.HYBRID_ANIMAL,\\n            name: name,\\n            rarity: getRarity(rarity),\\n            yield: yield,\\n            parentA: parentA,\\n            parentB: parentB,\\n            data: getMediaData(tokenURI, metadataURI),\\n            bidShares: getBidShares()\\n        });\\n\\n        hybrids[name] = hybrid;\\n        hybridParents[parentsKey(parentA, parentB)] = hybrid;\\n        return true;\\n    }\\n\\n    // Add Animal to rarity set if it has not been seen before\\n    function addAnimalToRarity(string memory rarity, string memory name) private {\\n        string[] storage _animals = rarityAnimals[rarity];\\n\\n        // Check if animal has been added to this rarity before\\n        for (uint256 i = 0; i < _animals.length; i++) {\\n            string memory known = _animals[i];\\n            if (keccak256(bytes(name)) == keccak256(bytes(known))) {\\n                // Not a new Animal\\n                return;\\n            }\\n        }\\n\\n        // New animal lets add to rarity list\\n        _animals.push(name);\\n\\n        // Ensure stored\\n        rarityAnimals[rarity] = _animals;\\n    }\\n\\n    // Return price for current EggDrop\\n    function eggPrice() public view returns (uint256) {\\n        return getEgg(baseEgg).price;\\n    }\\n\\n    function eggSupply() public view returns (uint256) {\\n        return getEgg(baseEgg).supply;\\n    }\\n\\n    function hybridSupply() public view returns (uint256) {\\n        return getEgg(hybridEgg).supply;\\n    }\\n\\n    // Return a new Egg Token\\n    function newEgg() external onlyZoo returns (IZoo.Token memory) {\\n        Egg memory egg = getEgg(baseEgg);\\n        require(eggSupply() == 0 || egg.minted < eggSupply(), \\\"Out of eggs\\\");\\n\\n        egg.minted++;\\n        eggs[egg.name] = egg;\\n\\n        // Convert egg into a token\\n        return IZoo.Token({\\n            rarity: getRarity('Common'),\\n            kind: IZoo.Type.BASE_EGG,\\n\\n            name: egg.name,\\n            birthday: block.number,\\n            timestamp: block.timestamp,\\n            data: egg.data,\\n            bidShares: egg.bidShares,\\n\\n            parents: IZoo.Parents(\\\"\\\", \\\"\\\", 0, 0), // Common eggs have no parents\\n\\n            id: 0,\\n            customName: \\\"\\\",\\n            breed: IZoo.Breed(0, 0),\\n            meta: IZoo.Meta(0, 0)\\n        });\\n    }\\n\\n    // Return a new Hybrid Egg Token\\n    function newHybridEgg(IZoo.Parents memory parents) external view onlyZoo returns (IZoo.Token memory) {\\n        Egg memory egg = getEgg(hybridEgg);\\n        require(hybridSupply() == 0 || egg.minted < hybridSupply(), \\\"Out of hybrid eggs\\\");\\n\\n        // Convert egg into a token\\n        return IZoo.Token({\\n            rarity: getRarity('Common'),\\n            kind: IZoo.Type.HYBRID_EGG,\\n            name: egg.name,\\n            birthday: block.number,\\n            timestamp: block.timestamp,\\n            data: egg.data,\\n            bidShares: egg.bidShares,\\n\\n            parents: parents, // Hybrid parents\\n\\n            id: 0,\\n            customName: \\\"\\\",\\n            breed: IZoo.Breed(0, 0),\\n            meta: IZoo.Meta(0, 0)\\n        });\\n    }\\n\\n    // Get Egg by name\\n    function getEgg(string memory name) private view returns (Egg memory) {\\n        return eggs[name];\\n    }\\n\\n    // Get Rarity by name\\n    function getRarity(string memory name) private view returns (IZoo.Rarity memory) {\\n        return rarities[name];\\n    }\\n\\n    // Get Animal by name\\n    function getAnimal(string memory name) private view returns (Animal memory) {\\n        return animals[name];\\n    }\\n\\n    // Get Hybrid by name\\n    function getHybrid(string memory name) private view returns (Hybrid memory) {\\n        return hybrids[name];\\n    }\\n\\n    // Chooses animal based on random number generated from(0-999)\\n    function getRandomAnimal(uint256 random) external view returns (IZoo.Token memory token) {\\n        Animal memory animal;\\n\\n        console.log('getRandomAnimal', random);\\n        console.log('raritySorted.length', raritySorted.length);\\n\\n        // Find rarest animal choices first\\n        for (uint256 i = 0; i < raritySorted.length; i++) {\\n            string memory name = raritySorted[i];\\n            IZoo.Rarity memory rarity = rarities[name];\\n\\n            console.log('rarity.name', name);\\n            console.log('rarity.probability', rarity.probability);\\n            console.log('rarityAnimals', rarityAnimals[name][0], rarityAnimals[name][1]);\\n\\n            // Highest probability first, failing that use lowest rarity (common) animal\\n            if (rarity.probability > random || i == raritySorted.length - 1) {\\n                string[] memory choices = rarityAnimals[name];\\n                animal = getAnimal(choices[random % choices.length]);\\n                break;\\n            }\\n        }\\n\\n        // Return Token\\n        token.kind = IZoo.Type.BASE_ANIMAL;\\n        token.name = animal.name;\\n        token.data = animal.data;\\n        token.rarity = animal.rarity;\\n        token.bidShares = animal.bidShares;\\n        token.timestamp = block.timestamp;\\n        token.birthday = block.number;\\n\\n        console.log('randomAnimal', animal.name, animal.rarity.name, animal.rarity.yield);\\n        console.log('randomAnimal.data.tokenURI', animal.data.tokenURI);\\n        console.log('randomAnimal.data.metadataURI', animal.data.metadataURI);\\n        return token;\\n    }\\n\\n    function getRandomHybrid(uint256 random, IZoo.Parents memory parents) external view returns (IZoo.Token memory token) {\\n        Hybrid[2] memory possible = [\\n            parentsToHybrid(parents.animalA, parents.animalB),\\n            parentsToHybrid(parents.animalB, parents.animalA)\\n        ];\\n\\n        // pick array index 0 or 1 depending on the rarity\\n        Hybrid memory hybrid = possible[random % 2];\\n\\n        // Return Token\\n        token.kind = IZoo.Type.HYBRID_ANIMAL;\\n        token.name = hybrid.name;\\n        token.data = hybrid.data;\\n        token.rarity = hybrid.rarity;\\n        token.rarity.yield = hybrid.yield; // Hybrid rarity overrides default\\n        token.bidShares = hybrid.bidShares;\\n        token.timestamp = block.timestamp;\\n        token.birthday = block.number;\\n        token.parents = parents;\\n        return token;\\n    }\\n\\n    // Helper to construct IMarket.BidShares struct\\n    function getBidShares() private pure returns (IMarket.BidShares memory) {\\n        return IMarket.BidShares({\\n            creator: Decimal.D256(10),\\n            owner: Decimal.D256(80),\\n            prevOwner: Decimal.D256(10)\\n        });\\n    }\\n\\n    // Helper to construct IMedia.MediaData struct\\n    function getMediaData(string memory tokenURI, string memory metadataURI) private pure returns (IMedia.MediaData memory) {\\n        return IMedia.MediaData({\\n            tokenURI: tokenURI,\\n            metadataURI: metadataURI,\\n            contentHash: bytes32(0),\\n            metadataHash: bytes32(0)\\n        });\\n    }\\n\\n    // Get key for two parents\\n    function parentsKey(string memory animalA, string memory animalB) private pure returns (string memory) {\\n        return string(abi.encodePacked(animalA, animalB));\\n    }\\n\\n    // Get Hybrid from Parents\\n    function parentsToHybrid(string memory nameA, string memory nameB) private view returns (Hybrid memory) {\\n        return hybridParents[parentsKey(nameA, nameB)];\\n    }\\n\\n    // Return the higher of two rarities\\n    function higher(IZoo.Rarity memory rarityA, IZoo.Rarity memory rarityB) private pure returns (IZoo.Rarity memory) {\\n        if (rarityA.probability < rarityB.probability) {\\n            return rarityA;\\n        }\\n        return rarityB;\\n    }\\n}\\n\",\"keccak256\":\"0xfe80ff566f641ecd306a5d813af413ec652d8f3f28cb3809a609b955e673114d\",\"license\":\"MIT\"},\"src/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n    function _sendLogPayload(bytes memory payload) private view {\\n        uint256 payloadLength = payload.length;\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        assembly {\\n            let payloadStart := add(payload, 32)\\n            let r := staticcall(\\n                gas(),\\n                consoleAddress,\\n                payloadStart,\\n                payloadLength,\\n                0,\\n                0\\n            )\\n        }\\n    }\\n\\n    function log() internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal view {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        uint256 p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(uint,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        string memory p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(string,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3)\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        bool p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(bool,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        uint256 p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,uint,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        string memory p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,string,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        bool p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,bool,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        uint256 p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,uint,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        string memory p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,string,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        bool p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,bool,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        uint256 p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,uint)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        string memory p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,string)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        bool p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,bool)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n\\n    function log(\\n        address p0,\\n        address p1,\\n        address p2,\\n        address p3\\n    ) internal view {\\n        _sendLogPayload(\\n            abi.encodeWithSignature(\\n                \\\"log(address,address,address,address)\\\",\\n                p0,\\n                p1,\\n                p2,\\n                p3\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x1df9703e731ddd2da1d569a490493a94d690d0a3586116f3ecbba545c3e9e8b1\",\"license\":\"MIT\"},\"src/interfaces/IMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// Forked from https://github.com/ourzora/core @ 450cd154bfbb70f62e94050cc3f1560d58e0506a\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { Decimal } from \\\"../Decimal.sol\\\";\\n\\n/**\\n * @title Interface for Zoo Protocol's Market\\n */\\ninterface IMarket {\\n\\n    struct Bid {\\n        // Amount of the currency being bid\\n        uint256 amount;\\n        // Address to the ERC20 token being used to bid\\n        address currency;\\n        // Address of the bidder\\n        address bidder;\\n        // Address of the recipient\\n        address recipient;\\n        // % of the next sale to award the current owner\\n        Decimal.D256 sellOnShare;\\n    }\\n\\n    struct Ask {\\n        // Amount of the currency being asked\\n        uint256 amount;\\n        // Address to the ERC20 token being asked\\n        address currency;\\n    }\\n\\n    struct BidShares {\\n        // % of sale value that goes to the _previous_ owner of the nft\\n        Decimal.D256 prevOwner;\\n        // % of sale value that goes to the original creator of the nft\\n        Decimal.D256 creator;\\n        // % of sale value that goes to the seller (current owner) of the nft\\n        Decimal.D256 owner;\\n    }\\n\\n    event BidCreated(uint256 indexed tokenID, Bid bid);\\n    event BidRemoved(uint256 indexed tokenID, Bid bid);\\n    event BidFinalized(uint256 indexed tokenID, Bid bid);\\n    event AskCreated(uint256 indexed tokenID, Ask ask);\\n    event AskRemoved(uint256 indexed tokenID, Ask ask);\\n    event BidShareUpdated(uint256 indexed tokenID, BidShares bidShares);\\n\\n    function bidForTokenBidder(uint256 tokenID, address bidder)\\n        external\\n        view\\n        returns (Bid memory);\\n\\n    function currentAskForToken(uint256 tokenID)\\n        external\\n        view\\n        returns (Ask memory);\\n\\n    function bidSharesForToken(uint256 tokenID)\\n        external\\n        view\\n        returns (BidShares memory);\\n\\n    function isValidBid(uint256 tokenID, uint256 bidAmount)\\n        external\\n        view\\n        returns (bool);\\n\\n    function isValidBidShares(BidShares calldata bidShares)\\n        external\\n        pure\\n        returns (bool);\\n\\n    function splitShare(Decimal.D256 calldata sharePercentage, uint256 amount)\\n        external\\n        pure\\n        returns (uint256);\\n\\n    function setBidShares(uint256 tokenID, BidShares calldata bidShares)\\n        external;\\n\\n    function setAsk(uint256 tokenID, Ask calldata ask) external;\\n\\n    function removeAsk(uint256 tokenID) external;\\n\\n    function setBid(\\n        uint256 tokenID,\\n        Bid calldata bid,\\n        address spender\\n    ) external;\\n\\n    function removeBid(uint256 tokenID, address bidder) external;\\n\\n    function acceptBid(uint256 tokenID, Bid calldata expectedBid) external;\\n}\\n\",\"keccak256\":\"0xb9ae2b808f01fb70d6eb41b223faf9c0d64d4a2f17826dbddba01b9125398c71\",\"license\":\"GPL-3.0\"},\"src/interfaces/IMedia.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// Forked from https://github.com/ourzora/core @ 450cd154bfbb70f62e94050cc3f1560d58e0506a\\n\\npragma solidity >=0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport { IMarket } from \\\"./IMarket.sol\\\";\\nimport { IZoo } from \\\"./IZoo.sol\\\";\\n\\n/**\\n * @title Interface for Zoo Protocol's Media\\n */\\ninterface IMedia {\\n    struct EIP712Signature {\\n        uint256 deadline;\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    struct MediaData {\\n        // A valid URI of the content represented by this token\\n        string tokenURI;\\n        // A valid URI of the metadata associated with this token\\n        string metadataURI;\\n        // A SHA256 hash of the content pointed to by tokenURI\\n        bytes32 contentHash;\\n        // A SHA256 hash of the content pointed to by metadataURI\\n        bytes32 metadataHash;\\n    }\\n\\n    event TokenURIUpdated(uint256 indexed _tokenID, address owner, string _uri);\\n    event TokenMetadataURIUpdated(\\n        uint256 indexed _tokenID,\\n        address owner,\\n        string _uri\\n    );\\n\\n    /**\\n     * @notice Return the metadata URI for a piece of media given the token URI\\n     */\\n    function tokenMetadataURI(uint256 tokenID)\\n        external\\n        view\\n        returns (string memory);\\n\\n    /**\\n     * @notice Mint new media for msg.sender.\\n     */\\n    function mint(MediaData calldata data, IMarket.BidShares calldata bidShares)\\n        external;\\n\\n    /**\\n     * @notice EIP-712 mintWithSig method. Mints new media for a creator given a valid signature.\\n     */\\n    function mintWithSig(\\n        address creator,\\n        MediaData calldata data,\\n        IMarket.BidShares calldata bidShares,\\n        EIP712Signature calldata sig\\n    ) external;\\n\\n    /**\\n     * @notice Transfer the token with the given ID to a given address.\\n     * Save the previous owner before the transfer, in case there is a sell-on fee.\\n     * @dev This can only be called by the auction contract specified at deployment\\n     */\\n    function auctionTransfer(uint256 tokenID, address recipient) external;\\n\\n    /**\\n     * @notice Set the ask on a piece of media\\n     */\\n    function setAsk(uint256 tokenID, IMarket.Ask calldata ask) external;\\n\\n    /**\\n     * @notice Remove the ask on a piece of media\\n     */\\n    function removeAsk(uint256 tokenID) external;\\n\\n    /**\\n     * @notice Set the bid on a piece of media\\n     */\\n    function setBid(uint256 tokenID, IMarket.Bid calldata bid) external;\\n\\n    /**\\n     * @notice Remove the bid on a piece of media\\n     */\\n    function removeBid(uint256 tokenID) external;\\n\\n    function acceptBid(uint256 tokenID, IMarket.Bid calldata bid) external;\\n\\n    /**\\n     * @notice Revoke approval for a piece of media\\n     */\\n    function revokeApproval(uint256 tokenID) external;\\n\\n    /**\\n     * @notice Update the token URI\\n     */\\n    function updateTokenURI(uint256 tokenID, string calldata tokenURI) external;\\n\\n    /**\\n     * @notice Update the token metadata uri\\n     */\\n    function updateTokenMetadataURI(\\n        uint256 tokenID,\\n        string calldata metadataURI\\n    ) external;\\n\\n    /**\\n     * @notice EIP-712 permit method. Sets an approved spender given a valid signature.\\n     */\\n    function permit(\\n        address spender,\\n        uint256 tokenID,\\n        EIP712Signature calldata sig\\n    ) external;\\n\\n    // Added for Zoo\\n    function mintToken(address owner, IZoo.Token memory tokenID) external returns (IZoo.Token memory);\\n    function burnToken(address owner, uint256 tokenID) external;\\n    function tokenExists(uint256 tokenID) external returns (bool);\\n}\\n\",\"keccak256\":\"0x382dc461b14d9b3b5bd03e31932a9dbe7447767a804a18c42cfe690c4854ca79\",\"license\":\"GPL-3.0\"},\"src/interfaces/IZoo.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.4;\\n\\nimport { IMedia } from \\\"./IMedia.sol\\\";\\nimport { IMarket } from \\\"./IMarket.sol\\\";\\n\\ninterface IZoo {\\n    enum Type {\\n        BASE_EGG,\\n        BASE_ANIMAL,\\n        HYBRID_EGG,\\n        HYBRID_ANIMAL\\n    }\\n\\n    struct Rarity {\\n        string  name;\\n        uint256 probability;\\n        uint256 yield;\\n        uint256 boost;\\n    }\\n\\n    struct Breed {\\n        uint256 count;\\n        uint256 timestamp;\\n    }\\n\\n    struct Parents {\\n        string  animalA;\\n        string  animalB;\\n        uint256 tokenA;\\n        uint256 tokenB;\\n    }\\n\\n    struct Meta {\\n        uint256 eggID;          // originating egg\\n        uint256 dropID;         // originating drop\\n    }\\n\\n    struct Token {\\n        Rarity  rarity;\\n        Type  kind;\\n        string  name;\\n        uint256 id;             // unique ID\\n        uint256 timestamp;      // time created\\n        uint256 birthday;       // birth block\\n        string  customName;     // optional, paid feature\\n        Parents parents;\\n        Breed   breed;\\n        Meta meta;\\n        IMedia.MediaData data;\\n        IMarket.BidShares bidShares;\\n    }\\n}\\n\",\"keccak256\":\"0xe7d21793430e0e702d72166ba0939eb8b996575bf7bf4b56277f47f721156bfd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101545760003560e01c806301dca3b7146101595780630489a8f61461017757806308f8bcc61461018c57806318160ddd1461019f57806319c920b5146101b557806325fcf635146101d8578063305e35521461020057806335c3a2d4146102085780633b5c98561461021b5780634a79d50c1461022e57806351b2440b14610236578063715018a6146102495780637e617eca146102535780638398c91f146102775780638da5cb5b1461027f5780639447c33d1461029f5780639908a82a146102c2578063b67a85bd146102ca578063ba349bde146102dd578063bc143506146102f0578063c2b9bd6314610310578063c4903d2d14610323578063c7d8b6c51461034a578063d232b7971461035d578063e82baf3014610365578063ee99608e14610378578063f2fde38b1461038b578063f51c654f1461039e575b600080fd5b6101616103b1565b60405161016e919061409a565b60405180910390f35b61017f61043f565b60405161016e91906142d0565b61017f61019a366004613d9f565b610794565b6101a7610e5b565b60405190815260200161016e565b6101c86101c3366004613aa4565b610e76565b604051901515815260200161016e565b6101eb6101e6366004613a0a565b61102f565b60405161016e99989796959493929190613f34565b6101a7611287565b610161610216366004613d9f565b6112a2565b61017f610229366004613db7565b6112cd565b610161611397565b6101c8610244366004613b4b565b6113a4565b61025161170a565b005b610266610261366004613a0a565b611745565b60405161016e959493929190613fa6565b610161611a3e565b610287611a4b565b6040516001600160a01b03909116815260200161016e565b6102b26102ad366004613a0a565b611a5a565b60405161016e9493929190614181565b6101a7611b15565b600454610287906001600160a01b031681565b6101616102eb366004613c43565b611b30565b6103036102fe366004613c85565b611b77565b60405161016e9190614231565b61025161031e3660046139dc565b611d03565b610336610331366004613a0a565b611d54565b60405161016e989796959493929190614006565b610336610358366004613a0a565b61216f565b6101a76121af565b61017f610373366004613d6d565b6121c1565b610251610386366004613a44565b61232e565b6102516103993660046139dc565b612389565b6101c86103ac366004613d1c565b612429565b600380546103be90614431565b80601f01602080910402602001604051908101604052809291908181526020018280546103ea90614431565b80156104375780601f1061040c57610100808354040283529160200191610437565b820191906000526020600020905b81548152906001019060200180831161041a57829003601f168201915b505050505081565b6104476134d3565b6004546001600160a01b0316331461047a5760405162461bcd60e51b8152600401610471906141e5565b60405180910390fd5b600061050f6002805461048c90614431565b80601f01602080910402602001604051908101604052809291908181526020018280546104b890614431565b80156105055780601f106104da57610100808354040283529160200191610505565b820191906000526020600020905b8154815290600101906020018083116104e857829003601f168201915b5050505050612579565b90506105196121af565b158061052f57506105286121af565b8160c00151105b6105695760405162461bcd60e51b815260206004820152600b60248201526a4f7574206f66206567677360a81b6044820152606401610471565b60c0810180519061057982614466565b8152505080600882602001516040516105929190613ee9565b90815260405190819003602001902081518154829060ff191660018360038111156105cd57634e487b7160e01b600052602160045260246000fd5b021790555060208281015180516105ea92600185019201906135a4565b5060408201516002820155606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e082015180518051600784019161063a918391602001906135a4565b50602082810151805161065392600185019201906135a4565b5060408281015160028301556060909201516003909101556101009290920151805151600b830155602081015151600c83015582015151600d9091015580516101c08101909152600661018082019081526521b7b6b6b7b760d11b6101a083015281906106bf9061284d565b81526020016000815260200182602001518152602001600081526020014281526020014381526020016040518060200160405280600081525081526020016040518060800160405280604051806020016040528060008152508152602001604051806020016040528060008152508152602001600081526020016000815250815260200160405180604001604052806000815260200160008152508152602001604051806040016040528060008152602001600081525081526020018260e00151815260200182610100015181525091505090565b61079c6134d3565b6107a4613628565b6107d56040518060400160405280600f81526020016e19d95d14985b991bdb505b9a5b585b608a1b81525084612935565b6040805180820190915260138152720e4c2e4d2e8f2a6dee4e8cac85cd8cadccee8d606b1b602082015260075461080c9190612935565b60005b600754811015610d545760006007828154811061083c57634e487b7160e01b600052603260045260246000fd5b90600052602060002001805461085190614431565b80601f016020809104026020016040519081016040528092919081815260200182805461087d90614431565b80156108ca5780601f1061089f576101008083540402835291602001916108ca565b820191906000526020600020905b8154815290600101906020018083116108ad57829003601f168201915b5050505050905060006005826040516108e39190613ee9565b908152602001604051809103902060405180608001604052908160008201805461090c90614431565b80601f016020809104026020016040519081016040528092919081815260200182805461093890614431565b80156109855780601f1061095a57610100808354040283529160200191610985565b820191906000526020600020905b81548152906001019060200180831161096857829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505090506109db6040518060400160405280600b81526020016a7261726974792e6e616d6560a81b8152508361297e565b610a13604051806040016040528060128152602001717261726974792e70726f626162696c69747960701b8152508260200151612935565b610be36040518060400160405280600d81526020016c726172697479416e696d616c7360981b815250600684604051610a4c9190613ee9565b9081526020016040518091039020600081548110610a7a57634e487b7160e01b600052603260045260246000fd5b906000526020600020018054610a8f90614431565b80601f0160208091040260200160405190810160405280929190818152602001828054610abb90614431565b8015610b085780601f10610add57610100808354040283529160200191610b08565b820191906000526020600020905b815481529060010190602001808311610aeb57829003601f168201915b5050505050600685604051610b1d9190613ee9565b9081526020016040518091039020600181548110610b4b57634e487b7160e01b600052603260045260246000fd5b906000526020600020018054610b6090614431565b80601f0160208091040260200160405190810160405280929190818152602001828054610b8c90614431565b8015610bd95780601f10610bae57610100808354040283529160200191610bd9565b820191906000526020600020905b815481529060010190602001808311610bbc57829003601f168201915b50505050506129c3565b8581602001511180610c025750600754610bff906001906143ee565b83145b15610d3f576000600683604051610c199190613ee9565b9081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b82821015610cf3578382906000526020600020018054610c6690614431565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9290614431565b8015610cdf5780601f10610cb457610100808354040283529160200191610cdf565b820191906000526020600020905b815481529060010190602001808311610cc257829003601f168201915b505050505081526020019060010190610c47565b505050509050610d3581825189610d0a9190614481565b81518110610d2857634e487b7160e01b600052603260045260246000fd5b6020026020010151612a0a565b9450505050610d54565b50508080610d4c90614466565b91505061080f565b506001602083810191909152604082810180518286015260608401516101408601528383018051865260808086015161016088015242908701524360a087015282518084018452600c81526b1c985b991bdb505b9a5b585b60a21b94810194909452905190518051920151610dca939290612d6f565b610e0e6040518060400160405280601a81526020017972616e646f6d416e696d616c2e646174612e746f6b656e55524960301b81525082606001516000015161297e565b610e556040518060400160405280601d81526020017f72616e646f6d416e696d616c2e646174612e6d6574616461746155524900000081525082606001516020015161297e565b50919050565b6000610e6d6002805461048c90614431565b60c00151905090565b600033610e81611a4b565b6001600160a01b031614610ea75760405162461bcd60e51b8152600401610471906141b0565b6040805160a081019091526000908060018152602001610ec68761284d565b8152602001878152602001610edb8686612dbe565b8152602001610ee8612dec565b815250905080600987604051610efe9190613ee9565b90815260405190819003602001902081518154829060ff19166001836003811115610f3957634e487b7160e01b600052602160045260246000fd5b02179055506020828101518051805191926001850192610f5c92849201906135a4565b5060208201518160010155604082015181600201556060820151816003015550506040820151816005019080519060200190610f999291906135a4565b506060820151805180516006840191610fb7918391602001906135a4565b506020828101518051610fd092600185019201906135a4565b50604082810151600283015560609092015160039091015560809290920151805151600a83015560208082015151600b8401559083015151600c9092019190915582015151908201516110239190612e2f565b50600195945050505050565b80516020818301810180516008825292820191909301209152805460018201805460ff909216929161106090614431565b80601f016020809104026020016040519081016040528092919081815260200182805461108c90614431565b80156110d95780601f106110ae576101008083540402835291602001916110d9565b820191906000526020600020905b8154815290600101906020018083116110bc57829003601f168201915b5050505050908060020154908060030154908060040154908060050154908060060154908060070160405180608001604052908160008201805461111c90614431565b80601f016020809104026020016040519081016040528092919081815260200182805461114890614431565b80156111955780601f1061116a57610100808354040283529160200191611195565b820191906000526020600020905b81548152906001019060200180831161117857829003601f168201915b505050505081526020016001820180546111ae90614431565b80601f01602080910402602001604051908101604052809291908181526020018280546111da90614431565b80156112275780601f106111fc57610100808354040283529160200191611227565b820191906000526020600020905b81548152906001019060200180831161120a57829003601f168201915b505050918352505060028201546020808301919091526003909201546040918201528051608081018252600b85015460608201908152815281518084018352600c86015481528184015281519283018252600d9094015482528301529089565b60006112996002805461048c90614431565b60600151905090565b600781815481106112b257600080fd5b9060005260206000200160009150905080546103be90614431565b6112d56134d3565b600060405180604001604052806112f485600001518660200151612f98565b815260200161130b85602001518660000151612f98565b9052905060008161131d600287614481565b6002811061133b57634e487b7160e01b600052603260045260246000fd5b602090810291909101516003858301526040808201518187015260c082015161014087015291810151808652606082015192019190915260e0908101516101608501524260808501524360a08501528301939093525092915050565b600180546103be90614431565b6000336113af611a4b565b6001600160a01b0316146113d55760405162461bcd60e51b8152600401610471906141b0565b60408051610100810190915260009080600381526020016113f58a61284d565b81526020018a815260200188815260200187815260200186815260200161141c8686612dbe565b8152602001611429612dec565b815250905080600a8a60405161143f9190613ee9565b90815260405190819003602001902081518154829060ff1916600183600381111561147a57634e487b7160e01b600052602160045260246000fd5b0217905550602082810151805180519192600185019261149d92849201906135a4565b50602082015181600101556040820151816002015560608201518160030155505060408201518160050190805190602001906114da9291906135a4565b5060608201516006820155608082015180516115009160078401916020909101906135a4565b5060a0820151805161151c9160088401916020909101906135a4565b5060c082015180518051600984019161153a918391602001906135a4565b50602082810151805161155392600185019201906135a4565b50604082810151600283015560609092015160039091015560e09290920151805151600d830155602081015151600e8301559091015151600f9091015580600b61159d8888613436565b6040516115aa9190613ee9565b90815260405190819003602001902081518154829060ff191660018360038111156115e557634e487b7160e01b600052602160045260246000fd5b0217905550602082810151805180519192600185019261160892849201906135a4565b50602082015181600101556040820151816002015560608201518160030155505060408201518160050190805190602001906116459291906135a4565b50606082015160068201556080820151805161166b9160078401916020909101906135a4565b5060a082015180516116879160088401916020909101906135a4565b5060c08201518051805160098401916116a5918391602001906135a4565b5060208281015180516116be92600185019201906135a4565b50604082810151600283015560609092015160039091015560e09290920151805151600d830155602081015151600e8301559091015151600f9091015550600198975050505050505050565b33611713611a4b565b6001600160a01b0316146117395760405162461bcd60e51b8152600401610471906141b0565b6117436000613462565b565b805160208183018101805160098252928201919093012091528054604080516080810190915260018301805460ff90931693928290829061178590614431565b80601f01602080910402602001604051908101604052809291908181526020018280546117b190614431565b80156117fe5780601f106117d3576101008083540402835291602001916117fe565b820191906000526020600020905b8154815290600101906020018083116117e157829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820154815250509080600501805461183590614431565b80601f016020809104026020016040519081016040528092919081815260200182805461186190614431565b80156118ae5780601f10611883576101008083540402835291602001916118ae565b820191906000526020600020905b81548152906001019060200180831161189157829003601f168201915b505050505090806006016040518060800160405290816000820180546118d390614431565b80601f01602080910402602001604051908101604052809291908181526020018280546118ff90614431565b801561194c5780601f106119215761010080835404028352916020019161194c565b820191906000526020600020905b81548152906001019060200180831161192f57829003601f168201915b5050505050815260200160018201805461196590614431565b80601f016020809104026020016040519081016040528092919081815260200182805461199190614431565b80156119de5780601f106119b3576101008083540402835291602001916119de565b820191906000526020600020905b8154815290600101906020018083116119c157829003601f168201915b505050918352505060028201546020808301919091526003909201546040918201528051608081018252600a85015460608201908152815281518084018352600b86015481528184015281519283018252600c9094015482528301529085565b600280546103be90614431565b6000546001600160a01b031690565b8051602081830181018051600582529282019190930120915280548190611a8090614431565b80601f0160208091040260200160405190810160405280929190818152602001828054611aac90614431565b8015611af95780601f10611ace57610100808354040283529160200191611af9565b820191906000526020600020905b815481529060010190602001808311611adc57829003601f168201915b5050505050908060010154908060020154908060030154905084565b6000611b276003805461048c90614431565b60400151905090565b81516020818401810180516006825292820191850191909120919052805482908110611b5b57600080fd5b906000526020600020016000915091505080546103be90614431565b611b7f613657565b33611b88611a4b565b6001600160a01b031614611bae5760405162461bcd60e51b8152600401610471906141b0565b611bb6613657565b60208101879052611bc78484612dbe565b60e0820152611bd4612dec565b610100820152606081018690526040808201869052518190600890611bfa908a90613ee9565b90815260405190819003602001902081518154829060ff19166001836003811115611c3557634e487b7160e01b600052602160045260246000fd5b02179055506020828101518051611c5292600185019201906135a4565b5060408201516002820155606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e0820151805180516007840191611ca2918391602001906135a4565b506020828101518051611cbb92600185019201906135a4565b5060408281015160028301556060909201516003909101556101009290920151805151600b830155602081015151600c8301559091015151600d909101559695505050505050565b33611d0c611a4b565b6001600160a01b031614611d325760405162461bcd60e51b8152600401610471906141b0565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b8051602081830181018051600a8252928201919093012091528054604080516080810190915260018301805460ff909316939282908290611d9490614431565b80601f0160208091040260200160405190810160405280929190818152602001828054611dc090614431565b8015611e0d5780601f10611de257610100808354040283529160200191611e0d565b820191906000526020600020905b815481529060010190602001808311611df057829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505090806005018054611e4490614431565b80601f0160208091040260200160405190810160405280929190818152602001828054611e7090614431565b8015611ebd5780601f10611e9257610100808354040283529160200191611ebd565b820191906000526020600020905b815481529060010190602001808311611ea057829003601f168201915b505050505090806006015490806007018054611ed890614431565b80601f0160208091040260200160405190810160405280929190818152602001828054611f0490614431565b8015611f515780601f10611f2657610100808354040283529160200191611f51565b820191906000526020600020905b815481529060010190602001808311611f3457829003601f168201915b505050505090806008018054611f6690614431565b80601f0160208091040260200160405190810160405280929190818152602001828054611f9290614431565b8015611fdf5780601f10611fb457610100808354040283529160200191611fdf565b820191906000526020600020905b815481529060010190602001808311611fc257829003601f168201915b5050505050908060090160405180608001604052908160008201805461200490614431565b80601f016020809104026020016040519081016040528092919081815260200182805461203090614431565b801561207d5780601f106120525761010080835404028352916020019161207d565b820191906000526020600020905b81548152906001019060200180831161206057829003601f168201915b5050505050815260200160018201805461209690614431565b80601f01602080910402602001604051908101604052809291908181526020018280546120c290614431565b801561210f5780601f106120e45761010080835404028352916020019161210f565b820191906000526020600020905b8154815290600101906020018083116120f257829003601f168201915b505050918352505060028201546020808301919091526003909201546040918201528051608081018252600d85015460608201908152815281518084018352600e86015481528184015281519283018252600f9094015482528301529088565b8051602081830181018051600b8252928201919093012091528054604080516080810190915260018301805460ff909316939282908290611d9490614431565b6000611b276002805461048c90614431565b6121c96134d3565b6004546001600160a01b031633146121f35760405162461bcd60e51b8152600401610471906141e5565b60006122056003805461048c90614431565b905061220f611b15565b1580612225575061221e611b15565b8160c00151105b6122665760405162461bcd60e51b81526020600482015260126024820152714f7574206f6620687962726964206567677360701b6044820152606401610471565b604080516101c08101909152600661018082019081526521b7b6b6b7b760d11b6101a083015281906122979061284d565b815260200160028152602001826020015181526020016000815260200142815260200143815260200160405180602001604052806000815250815260200184815260200160405180604001604052806000815260200160008152508152602001604051806040016040528060008152602001600081525081526020018260e001518152602001826101000151815250915050919050565b33612337611a4b565b6001600160a01b03161461235d5760405162461bcd60e51b8152600401610471906141b0565b81516123709060029060208501906135a4565b5080516123849060039060208401906135a4565b505050565b33612392611a4b565b6001600160a01b0316146123b85760405162461bcd60e51b8152600401610471906141b0565b6001600160a01b03811661241d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610471565b61242681613462565b50565b600033612434611a4b565b6001600160a01b03161461245a5760405162461bcd60e51b8152600401610471906141b0565b600084116124a55760405162461bcd60e51b8152602060048201526018602482015277526172697479206d757374206265206f766572207a65726f60401b6044820152606401610471565b604080516080810182528681526020810186905280820185905260608101849052905181906005906124d8908990613ee9565b908152602001604051809103902060008201518160000190805190602001906125029291906135a4565b50602082810151600180840191909155604084015160028401556060909301516003909201919091558251600780549384018155600052805161256c937fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688019291909101906135a4565b5060019695505050505050565b612581613657565b6008826040516125919190613ee9565b9081526040805191829003602001822061012083019091528054829060ff1660038111156125cf57634e487b7160e01b600052602160045260246000fd5b60038111156125ee57634e487b7160e01b600052602160045260246000fd5b815260200160018201805461260290614431565b80601f016020809104026020016040519081016040528092919081815260200182805461262e90614431565b801561267b5780601f106126505761010080835404028352916020019161267b565b820191906000526020600020905b81548152906001019060200180831161265e57829003601f168201915b505050505081526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782016040518060800160405290816000820180546126d690614431565b80601f016020809104026020016040519081016040528092919081815260200182805461270290614431565b801561274f5780601f106127245761010080835404028352916020019161274f565b820191906000526020600020905b81548152906001019060200180831161273257829003601f168201915b5050505050815260200160018201805461276890614431565b80601f016020809104026020016040519081016040528092919081815260200182805461279490614431565b80156127e15780601f106127b6576101008083540402835291602001916127e1565b820191906000526020600020905b8154815290600101906020018083116127c457829003601f168201915b505050918352505060028201546020808301919091526003909201546040918201529183528151608081018352600b85015460608201908152815282518083018452600c86015481528183015282518083018452600d9095015485529182019390935291015292915050565b61285561369d565b6005826040516128659190613ee9565b908152602001604051809103902060405180608001604052908160008201805461288e90614431565b80601f01602080910402602001604051908101604052809291908181526020018280546128ba90614431565b80156129075780601f106128dc57610100808354040283529160200191612907565b820191906000526020600020905b8154815290600101906020018083116128ea57829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820154815250509050919050565b61297a828260405160240161294b92919061415f565b60408051601f198184030181529190526020810180516001600160e01b03166309710a9d60e41b1790526134b2565b5050565b61297a82826040516024016129949291906140ad565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b1790526134b2565b6123848383836040516024016129db939291906140db565b60408051601f198184030181529190526020810180516001600160e01b0316632ced7cef60e01b1790526134b2565b612a12613628565b600982604051612a229190613ee9565b9081526040805191829003602001822060a083019091528054829060ff166003811115612a5f57634e487b7160e01b600052602160045260246000fd5b6003811115612a7e57634e487b7160e01b600052602160045260246000fd5b815260200160018201604051806080016040529081600082018054612aa290614431565b80601f0160208091040260200160405190810160405280929190818152602001828054612ace90614431565b8015612b1b5780601f10612af057610100808354040283529160200191612b1b565b820191906000526020600020905b815481529060010190602001808311612afe57829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820154815250508152602001600582018054612b5690614431565b80601f0160208091040260200160405190810160405280929190818152602001828054612b8290614431565b8015612bcf5780601f10612ba457610100808354040283529160200191612bcf565b820191906000526020600020905b815481529060010190602001808311612bb257829003601f168201915b5050505050815260200160068201604051806080016040529081600082018054612bf890614431565b80601f0160208091040260200160405190810160405280929190818152602001828054612c2490614431565b8015612c715780601f10612c4657610100808354040283529160200191612c71565b820191906000526020600020905b815481529060010190602001808311612c5457829003601f168201915b50505050508152602001600182018054612c8a90614431565b80601f0160208091040260200160405190810160405280929190818152602001828054612cb690614431565b8015612d035780601f10612cd857610100808354040283529160200191612d03565b820191906000526020600020905b815481529060010190602001808311612ce657829003601f168201915b505050918352505060028201546020808301919091526003909201546040918201529183528151608081018352600a85015460608201908152815282518083018452600b86015481528183015282518083018452600c9095015485529182019390935291015292915050565b612db884848484604051602401612d899493929190614114565b60408051601f198184030181529190526020810180516001600160e01b0316639fd009f560e01b1790526134b2565b50505050565b612dc66136c5565b506040805160808101825292835260208301919091526000908201819052606082015290565b612df46136ec565b5060408051608081018252600a6060820181815282528251602081810185529181528183015282519081018352605081529181019190915290565b6000600683604051612e419190613ee9565b9081526020016040518091039020905060005b8154811015612f44576000828281548110612e7f57634e487b7160e01b600052603260045260246000fd5b906000526020600020018054612e9490614431565b80601f0160208091040260200160405190810160405280929190818152602001828054612ec090614431565b8015612f0d5780601f10612ee257610100808354040283529160200191612f0d565b820191906000526020600020905b815481529060010190602001808311612ef057829003601f168201915b50505050509050808051906020012084805190602001201415612f31575050505050565b5080612f3c81614466565b915050612e54565b50805460018101825560008281526020908190208451612f6b9391909101918501906135a4565b5080600684604051612f7d9190613ee9565b9081526040519081900360200190208154612db89290613719565b612fa061377b565b600b612fac8484613436565b604051612fb99190613ee9565b9081526040805191829003602001822061010083019091528054829060ff166003811115612ff757634e487b7160e01b600052602160045260246000fd5b600381111561301657634e487b7160e01b600052602160045260246000fd5b81526020016001820160405180608001604052908160008201805461303a90614431565b80601f016020809104026020016040519081016040528092919081815260200182805461306690614431565b80156130b35780601f10613088576101008083540402835291602001916130b3565b820191906000526020600020905b81548152906001019060200180831161309657829003601f168201915b50505050508152602001600182015481526020016002820154815260200160038201548152505081526020016005820180546130ee90614431565b80601f016020809104026020016040519081016040528092919081815260200182805461311a90614431565b80156131675780601f1061313c57610100808354040283529160200191613167565b820191906000526020600020905b81548152906001019060200180831161314a57829003601f168201915b505050505081526020016006820154815260200160078201805461318a90614431565b80601f01602080910402602001604051908101604052809291908181526020018280546131b690614431565b80156132035780601f106131d857610100808354040283529160200191613203565b820191906000526020600020905b8154815290600101906020018083116131e657829003601f168201915b5050505050815260200160088201805461321c90614431565b80601f016020809104026020016040519081016040528092919081815260200182805461324890614431565b80156132955780601f1061326a57610100808354040283529160200191613295565b820191906000526020600020905b81548152906001019060200180831161327857829003601f168201915b50505050508152602001600982016040518060800160405290816000820180546132be90614431565b80601f01602080910402602001604051908101604052809291908181526020018280546132ea90614431565b80156133375780601f1061330c57610100808354040283529160200191613337565b820191906000526020600020905b81548152906001019060200180831161331a57829003601f168201915b5050505050815260200160018201805461335090614431565b80601f016020809104026020016040519081016040528092919081815260200182805461337c90614431565b80156133c95780601f1061339e576101008083540402835291602001916133c9565b820191906000526020600020905b8154815290600101906020018083116133ac57829003601f168201915b505050918352505060028201546020808301919091526003909201546040918201529183528151608081018352600d85015460608201908152815282518083018452600e86015481528183015282518083018452600f909501548552918201939093529101529392505050565b6060828260405160200161344b929190613f05565b604051602081830303815290604052905092915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b6040518061018001604052806134e761369d565b81526020016000815260200160608152602001600081526020016000815260200160008152602001606081526020016135416040518060800160405280606081526020016060815260200160008152602001600081525090565b8152602001613563604051806040016040528060008152602001600081525090565b8152602001613585604051806040016040528060008152602001600081525090565b81526020016135926136c5565b815260200161359f6136ec565b905290565b8280546135b090614431565b90600052602060002090601f0160209004810192826135d25760008555613618565b82601f106135eb57805160ff1916838001178555613618565b82800160010185558215613618579182015b828111156136185782518255916020019190600101906135fd565b506136249291506137c0565b5090565b6040805160a08101909152806000815260200161364361369d565b8152602001606081526020016135926136c5565b60408051610120810190915280600081526020016060815260200160008152602001600081526020016000815260200160008152602001600081526020016135926136c5565b6040518060800160405280606081526020016000815260200160008152602001600081525090565b60408051608081018252606080825260208201819052600092820183905281019190915290565b60405180606001604052806136ff6137d5565b815260200161370c6137d5565b815260200161359f6137d5565b82805482825590600052602060002090810192821561376f5760005260206000209182015b8281111561376f57828290805461375490614431565b61375f9291906137e8565b509160010191906001019061373e565b50613624929150613863565b604080516101008101909152806000815260200161379761369d565b8152602001606081526020016000815260200160608152602001606081526020016135926136c5565b5b8082111561362457600081556001016137c1565b6040518060200160405280600081525090565b8280546137f490614431565b90600052602060002090601f0160209004810192826138165760008555613618565b82601f106138275780548555613618565b8280016001018555821561361857600052602060002091601f016020900482015b82811115613618578254825591600101919060010190613848565b808211156136245760006138778282613880565b50600101613863565b50805461388c90614431565b6000825580601f1061389c575050565b601f01602090049060005260206000209081019061242691906137c0565b600082601f8301126138ca578081fd5b81356001600160401b03808211156138e4576138e46144b7565b604051601f8301601f19908116603f0116810190828211818310171561390c5761390c6144b7565b81604052838152866020858801011115613924578485fd5b8360208701602083013792830160200193909352509392505050565b600060808284031215613951578081fd5b604051608081016001600160401b038282108183111715613974576139746144b7565b81604052829350843591508082111561398c57600080fd5b613998868387016138ba565b835260208501359150808211156139ae57600080fd5b506139bb858286016138ba565b60208301525060408301356040820152606083013560608201525092915050565b6000602082840312156139ed578081fd5b81356001600160a01b0381168114613a03578182fd5b9392505050565b600060208284031215613a1b578081fd5b81356001600160401b03811115613a30578182fd5b613a3c848285016138ba565b949350505050565b60008060408385031215613a56578081fd5b82356001600160401b0380821115613a6c578283fd5b613a78868387016138ba565b93506020850135915080821115613a8d578283fd5b50613a9a858286016138ba565b9150509250929050565b60008060008060808587031215613ab9578182fd5b84356001600160401b0380821115613acf578384fd5b613adb888389016138ba565b95506020870135915080821115613af0578384fd5b613afc888389016138ba565b94506040870135915080821115613b11578384fd5b613b1d888389016138ba565b93506060870135915080821115613b32578283fd5b50613b3f878288016138ba565b91505092959194509250565b600080600080600080600060e0888a031215613b65578283fd5b87356001600160401b0380821115613b7b578485fd5b613b878b838c016138ba565b985060208a0135915080821115613b9c578485fd5b613ba88b838c016138ba565b975060408a0135965060608a0135915080821115613bc4578485fd5b613bd08b838c016138ba565b955060808a0135915080821115613be5578485fd5b613bf18b838c016138ba565b945060a08a0135915080821115613c06578384fd5b613c128b838c016138ba565b935060c08a0135915080821115613c27578283fd5b50613c348a828b016138ba565b91505092959891949750929550565b60008060408385031215613c55578182fd5b82356001600160401b03811115613c6a578283fd5b613c76858286016138ba565b95602094909401359450505050565b600080600080600060a08688031215613c9c578081fd5b85356001600160401b0380821115613cb2578283fd5b613cbe89838a016138ba565b965060208801359550604088013594506060880135915080821115613ce1578283fd5b613ced89838a016138ba565b93506080880135915080821115613d02578283fd5b50613d0f888289016138ba565b9150509295509295909350565b60008060008060808587031215613d31578384fd5b84356001600160401b03811115613d46578485fd5b613d52878288016138ba565b97602087013597506040870135966060013595509350505050565b600060208284031215613d7e578081fd5b81356001600160401b03811115613d93578182fd5b613a3c84828501613940565b600060208284031215613db0578081fd5b5035919050565b60008060408385031215613dc9578182fd5b8235915060208301356001600160401b03811115613de5578182fd5b613a9a85828601613940565b60048110613e0f57634e487b7160e01b600052602160045260246000fd5b9052565b60008151808452613e2b816020860160208601614405565b601f01601f19169290920160200192915050565b8051518252602080820151519083015260409081015151910152565b6000815160808452613e706080850182613e13565b905060208301518482036020860152613e898282613e13565b91505060408301516040850152606083015160608501528091505092915050565b6000815160808452613ebf6080850182613e13565b90506020830151602085015260408301516040850152606083015160608501528091505092915050565b60008251613efb818460208701614405565b9190910192915050565b60008351613f17818460208801614405565b835190830190613f2b818360208801614405565b01949350505050565b6000610160613f43838d613df1565b806020840152613f558184018c613e13565b90508960408401528860608401528760808401528660a08401528560c084015282810360e0840152613f878186613e5b565b915050613f98610100830184613e3f565b9a9950505050505050505050565b613fb08187613df1565b60e060208201526000613fc660e0830187613eaa565b8281036040840152613fd88187613e13565b90508281036060840152613fec8186613e5b565b915050613ffc6080830184613e3f565b9695505050505050565b6000610140614015838c613df1565b8060208401526140278184018b613eaa565b9050828103604084015261403b818a613e13565b905087606084015282810360808401526140558188613e13565b905082810360a08401526140698187613e13565b905082810360c084015261407d8186613e5b565b91505061408d60e0830184613e3f565b9998505050505050505050565b602081526000613a036020830184613e13565b6040815260006140c06040830185613e13565b82810360208401526140d28185613e13565b95945050505050565b6060815260006140ee6060830186613e13565b82810360208401526141008186613e13565b90508281036040840152613ffc8185613e13565b6080815260006141276080830187613e13565b82810360208401526141398187613e13565b9050828103604084015261414d8186613e13565b91505082606083015295945050505050565b6040815260006141726040830185613e13565b90508260208301529392505050565b6080815260006141946080830187613e13565b6020830195909552506040810192909252606090910152919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602c908201527f5a6f6f44726f703a204f6e6c79205a6f6f4b65657065722063616e2063616c6c60408201526b081d1a1a5cc81b595d1a1bd960a21b606082015260800190565b60208152614243602082018351613df1565b600060208301516101606040840152614260610180840182613e13565b90506040840151606084015260608401516080840152608084015160a084015260a084015160c084015260c084015160e084015260e0840151610100601f1985840301818601526142b18383613e5b565b9250808601519150506142c8610120850182613e3f565b509392505050565b602081526000825161020060208401526142ee610220840182613eaa565b905060208401516143026040850182613df1565b506040840151601f198085840301606086015261431f8383613e13565b925060608601516080860152608086015160a086015260a086015160c086015260c08601519150808584030160e086015261435a8383613e13565b925060e086015191506101008186850301818701526143798484613e5b565b93508087015192505061012061439b8187018480518252602090810151910152565b86015191506101606143b98682018480518252602090810151910152565b610140870151925081868503016101a08701526143d68484613e5b565b935080870151925050506142c86101c0850182613e3f565b600082821015614400576144006144a1565b500390565b60005b83811015614420578181015183820152602001614408565b83811115612db85750506000910152565b600181811c9082168061444557607f821691505b60208210811415610e5557634e487b7160e01b600052602260045260246000fd5b600060001982141561447a5761447a6144a1565b5060010190565b60008261449c57634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220a26b87e2e8fd7791255371e5c82a312344c085d0179d0b2c32652ae7e8ae2f5764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6757,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "title",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 6759,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "baseEgg",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 6761,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "hybridEgg",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 6763,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "keeperAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 6768,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "rarities",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Rarity)19921_storage)"
      },
      {
        "astId": 6773,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "rarityAnimals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 6776,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "raritySorted",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 6781,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "eggs",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Egg)6719_storage)"
      },
      {
        "astId": 6786,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "animals",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Animal)6734_storage)"
      },
      {
        "astId": 6791,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "hybrids",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Hybrid)6755_storage)"
      },
      {
        "astId": 6796,
        "contract": "src/ZooDrop.sol:ZooDrop",
        "label": "hybridParents",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Hybrid)6755_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Type)19912": {
        "encoding": "inplace",
        "label": "enum IZoo.Type",
        "numberOfBytes": "1"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Animal)6734_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct ZooDrop.Animal)",
        "numberOfBytes": "32",
        "value": "t_struct(Animal)6734_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Egg)6719_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct ZooDrop.Egg)",
        "numberOfBytes": "32",
        "value": "t_struct(Egg)6719_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Hybrid)6755_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct ZooDrop.Hybrid)",
        "numberOfBytes": "32",
        "value": "t_struct(Hybrid)6755_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Rarity)19921_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct IZoo.Rarity)",
        "numberOfBytes": "32",
        "value": "t_struct(Rarity)19921_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Animal)6734_storage": {
        "encoding": "inplace",
        "label": "struct ZooDrop.Animal",
        "members": [
          {
            "astId": 6722,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "kind",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Type)19912"
          },
          {
            "astId": 6725,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "rarity",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Rarity)19921_storage"
          },
          {
            "astId": 6727,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "name",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 6730,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "data",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(MediaData)19747_storage"
          },
          {
            "astId": 6733,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "bidShares",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(BidShares)19579_storage"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(BidShares)19579_storage": {
        "encoding": "inplace",
        "label": "struct IMarket.BidShares",
        "members": [
          {
            "astId": 19572,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "prevOwner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(D256)4192_storage"
          },
          {
            "astId": 19575,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(D256)4192_storage"
          },
          {
            "astId": 19578,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "owner",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(D256)4192_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(D256)4192_storage": {
        "encoding": "inplace",
        "label": "struct Decimal.D256",
        "members": [
          {
            "astId": 4191,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Egg)6719_storage": {
        "encoding": "inplace",
        "label": "struct ZooDrop.Egg",
        "members": [
          {
            "astId": 6700,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "kind",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Type)19912"
          },
          {
            "astId": 6702,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 6704,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "supply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6706,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6708,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "timestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6710,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "birthday",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6712,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "minted",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6715,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "data",
            "offset": 0,
            "slot": "7",
            "type": "t_struct(MediaData)19747_storage"
          },
          {
            "astId": 6718,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "bidShares",
            "offset": 0,
            "slot": "11",
            "type": "t_struct(BidShares)19579_storage"
          }
        ],
        "numberOfBytes": "448"
      },
      "t_struct(Hybrid)6755_storage": {
        "encoding": "inplace",
        "label": "struct ZooDrop.Hybrid",
        "members": [
          {
            "astId": 6737,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "kind",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Type)19912"
          },
          {
            "astId": 6740,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "rarity",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Rarity)19921_storage"
          },
          {
            "astId": 6742,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "name",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 6744,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "yield",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6746,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "parentA",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          },
          {
            "astId": 6748,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "parentB",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          },
          {
            "astId": 6751,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "data",
            "offset": 0,
            "slot": "9",
            "type": "t_struct(MediaData)19747_storage"
          },
          {
            "astId": 6754,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "bidShares",
            "offset": 0,
            "slot": "13",
            "type": "t_struct(BidShares)19579_storage"
          }
        ],
        "numberOfBytes": "512"
      },
      "t_struct(MediaData)19747_storage": {
        "encoding": "inplace",
        "label": "struct IMedia.MediaData",
        "members": [
          {
            "astId": 19740,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "tokenURI",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 19742,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "metadataURI",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 19744,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "contentHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 19746,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "metadataHash",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Rarity)19921_storage": {
        "encoding": "inplace",
        "label": "struct IZoo.Rarity",
        "members": [
          {
            "astId": 19914,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 19916,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "probability",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 19918,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "yield",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19920,
            "contract": "src/ZooDrop.sol:ZooDrop",
            "label": "boost",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}